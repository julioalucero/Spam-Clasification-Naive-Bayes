#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'bayes'

puts "\n" + "*" * 80  + "\n" +
     " " * 20 + "Detector de Spam" + " " * 20 + "\n" +
     "*" * 80 + "\n"


email = IO.read("spamTrain.label")
lines = email.split("\n")
lines.collect! { |l| l.split }
SPAM_HASH = Hash.new
lines.each do |line|
  SPAM_HASH[line[1]] = line[0]
end

p "Comienza Fase de Lectura de e-Mails"

file_path = 'emails/mailsDistMedia.csv'

emails = Bayes::Csv.new(file_path)

p "Finaliza Fase de Lectura de e-Mails"
p "***********************************"

p "Comienza Fase de Entrenamiento     " 


#emails
emailE = emails.email.clone

#spam
emailSpam = emails.spam.clone

#validacion cruzada
i = 1
5.times do

emailE.shuffle!
emailSpam.shuffle!

dataBase = Bayes::BayesTraining.new(emailE[0..300],emailSpam[0..300])
dataBase.clasification

p "Finaliza Fase Entrenamiento        "
p "***********************************"

p "Comienza Fase de Clasificacion     " 

emailT = emailE[400..500]
spamT = emailSpam[400..500]
contadorErrores=0
errSpam = 0
errE = 0

spamT.each do |email|
	clasification = Bayes::BayesSpam.new(email,dataBase)
	contadorErrores +=1 if(clasification.spam == false)
	errSpam +=1 if(clasification.spam == false)
end

emailT.each do |email|
	clasification = Bayes::BayesSpam.new(email,dataBase)
	contadorErrores +=1 if(clasification.spam == true)
	errE +=1 if(clasification.spam == true) 
end


p "El porcentaje de errores es: "
p (contadorErrores / 200.0 ) * 100.0 
p "iteracion #{i} "
p "mail"
p errE
p "spam"
p errSpam
p "Finaliza Fase de Clasificacion     "
p "***********************************"
i +=1

end
